

apply plugin: 'java'
apply plugin: 'maven-publish'


repositories {
    mavenCentral()
    maven {
       url "https://nexus.bedatadriven.com/content/groups/public"
    }
}

project.ext {
    gccVersion = "4.7.4"
    sourceArchiveFile = new File("${buildDir}/gcc-${gccVersion}.tar.gz")
    pluginFile = project.property("gccBridgePlugin")
    gccWorkDir = new File("${buildDir}/gcc-work")
    buildNumber = System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "dev";
}

def sourceDir = project.file("gcc-${gccVersion}/libstdc++-v3/")
def libsupDir = project.file("gcc-${gccVersion}/libstdc++-v3/libsupc++")
def libgccIncludeDir = project.file("gcc-${gccVersion}/libgcc/")

def supSources = [
    "array_type_info.cc",
    "atexit_arm.cc",
    "bad_alloc.cc",
    "bad_cast.cc",
    "bad_typeid.cc",
    "class_type_info.cc",
    "del_op.cc",
    "del_opnt.cc",
    "del_opv.cc",
    "del_opvnt.cc",
    "dyncast.cc",
    "eh_alloc.cc",
    "eh_arm.cc",
    "eh_aux_runtime.cc",
    "eh_call.cc",
    "eh_catch.cc",
    "eh_exception.cc",
    "eh_globals.cc",
    "eh_personality.cc",
    "eh_ptr.cc",
    "eh_term_handler.cc",
    "eh_terminate.cc",
    "eh_tm.cc",
    "eh_throw.cc",
    "eh_type.cc",
    "eh_unex_handler.cc",
    "enum_type_info.cc",
    "function_type_info.cc",
    "fundamental_type_info.cc",
    "guard.cc",
    "guard_error.cc",
    "hash_bytes.cc",
    "nested_exception.cc",
    "new_handler.cc",
    "new_op.cc",
    "new_opnt.cc",
    "new_opv.cc",
    "new_opvnt.cc",
    "pbase_type_info.cc",
    "pmem_type_info.cc",
    "pointer_type_info.cc",
    "pure.cc",
    "si_class_type_info.cc",
    "tinfo.cc",
    "tinfo2.cc",
    "vec.cc",
    "vmi_class_type_info.cc",
    "vterminate.cc"
]

def sources98 = [
//    "src/c++98/bitmap_allocator.cc",
//    "src/c++98/pool_allocator.cc",
//    "src/c++98/mt_allocator.cc",
    "src/c++98/codecvt.cc",
    "src/c++98/complex_io.cc",
   "src/c++98/ctype.cc",
   "src/c++98/globals_io.cc",
   "src/c++98/hash_tr1.cc",
   "src/c++98/hashtable_tr1.cc",
   "src/c++98/ios.cc",
   "src/c++98/ios_failure.cc",
   "src/c++98/ios_init.cc",
   "src/c++98/ios_locale.cc",
   "src/c++98/list.cc",
   "src/c++98/locale.cc",
   "src/c++98/locale_init.cc",
   "src/c++98/locale_facets.cc",
   "src/c++98/localename.cc",
   "src/c++98/math_stubs_float.cc",
   "src/c++98/math_stubs_long_double.cc",
   "src/c++98/stdexcept.cc",
   "src/c++98/strstream.cc",
   "src/c++98/tree.cc",
   "src/c++98/istream.cc",
   "src/c++98/streambuf.cc",
   "src/c++98/valarray.cc",
//   "src/c++98/atomicity.cc",
//   "src/c++98/bitmap_allocator.cc",
   "src/c++98/pool_allocator.cc",
   "src/c++98/mt_allocator.cc",
   "src/c++98/codecvt.cc",
   "src/c++98/complex_io.cc",
   "src/c++98/ctype.cc",
   "src/c++98/globals_io.cc",
   "src/c++98/hash_tr1.cc",
   "src/c++98/hashtable_tr1.cc",
   "src/c++98/ios.cc",
   "src/c++98/ios_failure.cc",
   "src/c++98/ios_init.cc",
   "src/c++98/ios_locale.cc",
   "src/c++98/list.cc",
   "src/c++98/locale.cc",
   "src/c++98/locale_init.cc",
   "src/c++98/locale_facets.cc",
   "src/c++98/localename.cc",
   "src/c++98/math_stubs_float.cc",
   "src/c++98/math_stubs_long_double.cc",
   "src/c++98/stdexcept.cc",
   "src/c++98/strstream.cc",
   "src/c++98/tree.cc",
   "src/c++98/istream.cc",
   "src/c++98/streambuf.cc",
   "src/c++98/valarray.cc",
//   "src/c++98/atomicity.cc",
//   "src/c++98/codecvt_members.cc",
//   "src/c++98/collate_members.cc",
//   "src/c++98/ctype_configure_char.cc",
//   "src/c++98/ctype_members.cc",
//   "src/c++98/messages_members.cc",
//   "src/c++98/monetary_members.cc",
//   "src/c++98/numeric_members.cc",
//   "src/c++98/time_members.cc",
   "config/io/basic_file_stdio.cc",
//   "src/c++98/c_locale.cc",
   "src/c++98/allocator-inst.cc",
   "src/c++98/concept-inst.cc",
   "src/c++98/ext-inst.cc",
   "src/c++98/ios-inst.cc",
   "src/c++98/iostream-inst.cc",
   "src/c++98/istream-inst.cc",
   "src/c++98/locale-inst.cc",
   "src/c++98/misc-inst.cc",
   "src/c++98/ostream-inst.cc",
   "src/c++98/sstream-inst.cc",
   "src/c++98/streambuf-inst.cc",
   "src/c++98/wlocale-inst.cc",
   "src/c++98/parallel_settings.cc"
]

def sources11 = [
    "chrono.cc",
//    "condition_variable.cc", ---> threads!
//    "debug.cc",
    "functexcept.cc",
    "functional.cc",
    "future.cc",
    "hash_c++0x.cc",
    "hashtable_c++0x.cc",
    "limits.cc",
    "mutex.cc",
    "placeholders.cc",
    "regex.cc",
    "shared_ptr.cc",
    "system_error.cc",
    "thread.cc",
    "fstream-inst.cc",
    "string-inst.cc",
    "wstring-inst.cc",
    "compatibility-thread-c++0x.cc"
]

configurations {
    gimpleCompiler
}

dependencies {
    gimpleCompiler "org.renjin:gcc-bridge-compiler:${renjinVersion}"
}


task downloadGccSources {
    inputs.property "version", gccVersion
    outputs.file sourceArchiveFile
    doLast {
        def url = new URL("https://ftp.gnu.org/gnu/gcc/gcc-${gccVersion}/gcc-${gccVersion}.tar.gz")
        url.withInputStream{ i -> sourceArchiveFile.withOutputStream{ it << i }}
    }
    onlyIf {
        !project.file("gcc-${gccVersion}").exists()
    }
}

task unpackGccSources(type: Copy) {
    dependsOn downloadGccSources
    from tarTree(sourceArchiveFile)
    into projectDir
    onlyIf {
        !project.file("gcc-${gccVersion}").exists()
    }
}

task buildGccPlugin {
   // No-op currently
} 

/*
 * The following task compiles the libstdc++ sources to object and gimple files.
 *
 * The configuration and the flags have been reverse-engineered from building GCC-4.7.4 and more or less copying
 * the compilation commands executed.
 *
 * There are a few modifications:
 *
 * - GCC compiles most of these sources with -nostdinc++ and includes a configured version of the std c++ headers.
 *   When I tried this, the build failed, so I ommitted the flags and the local headers. This means we could be
 *   building against a slightly different version of the C++ headers, but it seems to mostly work this way.
 *
 * - For now, inlining is disabled as it seems to work better with the Gimple compiler. To be confirmed.
 */

task compileCC {
  
    dependsOn 'unpackGccSources'
    dependsOn 'buildGccPlugin'


    inputs.dir sourceDir
    inputs.dir libgccIncludeDir
    outputs.dir gccWorkDir

    doFirst {

        project.delete gccWorkDir
        project.mkdir gccWorkDir


        project.mkdir "${gccWorkDir}/sup"
        supSources.forEach { source ->
            project.exec {
                workingDir = "${gccWorkDir}/sup"
                commandLine = ['gcc-4.7', '-c', '-m32', '-fno-inline-functions', '-fdisable-tree-einline', '-fno-rtti',
                               "-I${libgccIncludeDir.absolutePath}",
                               "-I${libsupDir.absolutePath}",
                               "-D_GLIBCXX_SHARED",
                               "-D_GNU_SOURCE",
                               "-fplugin=${pluginFile}",
                               "${libsupDir.absolutePath}/${source}" ]
            }
        }

        project.mkdir "${gccWorkDir}/c++98"

        sources98.forEach { source ->
            project.exec {
                workingDir = "${gccWorkDir}/c++98"
                standardOutput = System.out
                commandLine = ['gcc-4.7', '-c', '-m32', '-fno-inline-functions', '-fno-implicit-templates', '-fdisable-tree-einline', '-fno-rtti',
                               "-I${libgccIncludeDir.absolutePath}",
                               "-I${libsupDir.absolutePath}",
                               "-D_GLIBCXX_SHARED",
                               "-D_GNU_SOURCE",
                               "-fplugin=${pluginFile}",
                               "${sourceDir.absolutePath}/${source}" ]
            }
        }

        project.mkdir "${gccWorkDir}/c++11"

        sources11.forEach { source ->
            project.exec {
                workingDir =  "${gccWorkDir}/c++11"
                standardOutput = System.out
                commandLine = ['gcc-4.7', '-c', '-m32', '-fno-inline-functions', '-fno-implicit-templates', '-fdisable-tree-einline', '-fno-rtti',
                               "-I${libgccIncludeDir.absolutePath}",
                               "-I${libsupDir.absolutePath}",
                               "-std=gnu++11",
                               "-D_GLIBCXX_SHARED",
                               "-D_GNU_SOURCE",
                               "-fplugin=${pluginFile}",
                               "${sourceDir.absolutePath}/src/c++11/${source}" ]
            }
        }
    }
}

task compileGimple(type: JavaExec) {
    dependsOn 'compileCC'
    description 'Compiles .gimple output to JVM bytecode'
    inputs.dir gccWorkDir
    outputs.dir project.file("$buildDir/classes")

    main = 'org.renjin.gcc.GimpleCompiler'
    classpath configurations.gimpleCompiler
    args "--package=org.renjin.libstdcxx"
    args "--output-dir=$buildDir/classes"
    args "--log-dir=$buildDir/gcc-bridge-logs"
    args "--ignore-errors=true"

    doFirst {
      args project.fileTree(gccWorkDir).files.findAll { it.name.endsWith('.gimple') }.asList()
    }
}


sourceSets {
    main {
        output.dir("$buildDir/classes", builtBy: 'compileGimple')
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId 'org.renjin'
            artifactId 'libstdcxx'
        }
    }

    if(project.hasProperty('renjinDeploymentPassword')) {
        repositories {
            maven {
                url = "https://nexus.bedatadriven.com/content/repositories/renjin-release/"
                credentials {
                    username 'deployment'
                    password project.property("renjinDeploymentPassword")
                }
            }
        }
    }
}
