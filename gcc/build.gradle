

buildscript {

    repositories {
        mavenLocal()
        maven {
            url "https://nexus.bedatadriven.com/content/groups/public"
        }
    }
    dependencies {
        classpath "org.renjin:gcc-bridge-compiler:${renjinVersion}"
    }
}

repositories {
    ivy {
        url 'https://ftp.gnu.org/'
        layout 'pattern', {
            artifact '/[organisation]/[module]/[module]-[revision]/[module]-[revision].[ext]'
        }
    }
}

project.ext {
    gccVersion = "4.7.4"
    pluginFile = new File("${buildDir}/bridge.so")
    gccWorkDir = new File("${buildDir}/gcc-work")
    buildNumber = System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "dev";
    sourceFiles = [
            "c++98/allocator-inst.cc",
            "c++98/bitmap_allocator.cc",
            "c++98/compatibility.cc",
            "c++98/concept-inst.cc",
            "c++98/ctype.cc",
            "c++98/ext-inst.cc",
            "c++98/misc-inst.cc",
            "c++98/ios.cc",
            "c++98/ios_failure.cc",
            "c++98/ios_init.cc",
            "c++98/ios-inst.cc",
            "c++98/ios_locale.cc",
            "c++98/iostream-inst.cc",
            "c++98/ostream-inst.cc",

            "c++98/sstream-inst.cc",
            "c++98/streambuf.cc",
            "c++98/streambuf-inst.cc",

            "c++98/locale.cc",
            "c++98/locale_facets.cc",
            "c++98/locale_init.cc",
            "c++98/locale-inst.cc",
            "c++98/wlocale-inst.cc",
            "c++98/localename.cc",


            "c++11/fstream-inst.cc",

            "c++11/functexcept.cc",
            "c++11/functional.cc",

            "c++11/future.cc",

            "c++11/regex.cc",

            "c++11/string-inst.cc",
            "c++11/wstring-inst.cc"
    ]
}


configurations {
    compile
}

dependencies {
    compile "gnu:gcc:${gccVersion}@tar.gz"
}

apply plugin: 'maven'


task buildGccPlugin {
    doLast {
        org.renjin.gcc.Gcc.extractPluginTo(pluginFile)
    }
}

task fetchGccSources(type: Copy) {
    from tarTree(resources.gzip(project.configurations.compile.find {it.name.startsWith("gcc")}))
    into projectDir
    onlyIf {
        !project.file("gcc-${gccVersion}").exists()
    }
}


task compileCxx {
    dependsOn 'fetchGccSources'
    dependsOn 'buildGccPlugin'
    description 'Compiles .cc sources to gimple'

    def sourceRoot = project.file("gcc-${gccVersion}/libstdc++-v3/src")

    outputs.dir gccWorkDir

    doLast {
        gccWorkDir.mkdirs()

        sourceFiles.each { sourceFile ->

            logger.lifecycle("Compiling ${sourceFile}")

            def flags = [ "-Igcc-${gccVersion}/libstdc++-v3/include"];
            if(sourceFile.contains("c++11")) {
                flags += '-std=gnu++11'
            }

            project.exec {
                workingDir = gccWorkDir
                standardOutput = System.out
                commandLine = ['gcc-4.7', '-c', '-m32', "-fplugin=${pluginFile}" ] + flags + [ "${sourceRoot.absolutePath}/${sourceFile}" ]
            }
        }
    }
}

task compileGimple {
    dependsOn 'compileCxx'
    description 'Compiles .gimple output to JVM bytecode'
    inputs.dir gccWorkDir
    outputs.dir project.file("$buildDir/classes")

    doLast {
        def compiler = new org.renjin.gcc.GimpleCompiler();
        compiler.outputDirectory = project.file("$buildDir/classes")
        compiler.packageName = "org.renjin.libstdcxx"
        compiler.pruneUnusedSymbols = false
        compiler.logger = new org.renjin.gcc.HtmlTreeLogger(project.file("$buildDir/gcc-bridge-logs"))
        compiler.compileSources(gccWorkDir.listFiles().findAll { it.name.endsWith('.gimple') })
    }
}

task jar(type: Jar) {
    dependsOn 'compileGimple'
    archiveName = "renjin-libstdcxx.jar"
    destinationDir = project.file("$buildDir/libs")
    from("$buildDir/classes") {

    }
}

task sourceJar(type: Jar) {
    archiveName = "renin-libstdcxx-sources.jar"
    destinationDir = project.file("$buildDir/libs")

    def sources = sourceFiles.collect { project.file("gcc-${gccVersion}/libstdc++-v3/src/${it}") }

    from(sources) {
        into "org/renjin/libstdcxx"
    }
}

task headerJar(type: Jar) {
    archiveName = "renjin-libstdcxx-headers.jar"
    destinationDir = project.file("$buildDir/libs")
    from("gcc-${gccVersion}/libstdc++-v3/include") {
        exclude "Makefile*"
    }
}

build.dependsOn 'jar'
build.dependsOn 'headerJar'

publishing {
    publications {
        library(MavenPublication) {
            groupId 'org.renjin'
            artifactId 'libstdcxx'
            version "${gccVersion}-b${buildNumber}"

            artifact jar
            artifact(headerJar) {
                classifier = "headers"
            }
        }
    }
}
